// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Chat {
  id        String    @id @default(cuid())
  name      String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  sender    String // 'user' | 'ai'
  timestamp DateTime @default(now())
  status    String   @default("sent")
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Report {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analysis {
  id                String             @id @default(cuid())
  company           String
  industry          String
  region            String
  additionalContext String?            @db.Text
  status            AnalysisStatus     @default(CREATED)
  chatId            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  questions         AnalysisQuestion[]
  responses         AnalysisResponse[]
}

enum AnalysisStatus {
  CREATED
  QUESTIONS_SELECTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model AnalysisQuestion {
  id         String   @id @default(cuid())
  analysisId String
  analysis   Analysis @relation(fields: [analysisId], references: [id])
  questionId String
  question   String
  prompt     String   @db.Text
  createdAt  DateTime @default(now())

  @@index([analysisId])
}

model AnalysisResponse {
  id         String   @id @default(cuid())
  analysisId String
  analysis   Analysis @relation(fields: [analysisId], references: [id])
  questionId String
  content    String   @db.Text
  createdAt  DateTime @default(now())

  @@index([analysisId])
  @@index([questionId])
}
