<!--
  Chat Component
  
  Main container for the chat interface that displays messages
  and provides interaction capabilities.
-->
<script lang="ts">
  import {
    getActiveChat,
    getMessages,
    getSortedChats,
    addMessage,
    setActiveChat
  } from './Chat.svelte.ts';
  import type { ChatMessage, Chat } from '$lib/features/chat/types/chat';
  
  // Props with proper typing
  let { variant = 'default' } = $props<{
    variant?: 'default' | 'sidebar';
  }>();
  
  // State using Svelte 5 runes
  let error = $state<string | null>(null);
  let isLoading = $state(false);
  let messageInput = $state('');
  let chatContainer = $state<HTMLDivElement | null>(null);
  
  // Get current chat data
  $effect(() => {
    const currentChat = getActiveChat();
    const currentMessages = getMessages();
    
    // Auto-scroll when messages change
    if (chatContainer && currentMessages && currentMessages.length > 0) {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
  });
  
  // Handle sending a message
  async function handleSendMessage() {
    if (!messageInput.trim() || isLoading) return;
    
    isLoading = true;
    try {
      const activeChat = getActiveChat();
      if (!activeChat) {
        error = "No active chat selected";
        return;
      }
      
      // Create message object
      const message: Partial<ChatMessage> = {
        id: crypto.randomUUID(),
        content: messageInput,
        sender: 'user',
        timestamp: new Date().toISOString()
      };
      
      // Clear input immediately for better UX
      const currentInput = messageInput;
      messageInput = '';
      
      // Add message to chat
      const success = await addMessage(message);
      if (!success) {
        error = "Failed to send message";
        messageInput = currentInput; // Restore input on failure
      }
    } catch (err) {
      error = err instanceof Error ? err.message : "An error occurred";
    } finally {
      isLoading = false;
    }
  }
  
  // Clear error message
  function clearError() {
    error = null;
  }
</script>

<div class="h-full flex flex-col">
  {#if error}
    <div class="bg-error-100 text-error-700 p-4 border-b border-error-200 flex justify-between items-center">
      <p class="m-0">{error}</p>
      <button 
        onclick={clearError}
        class="text-error-500 hover:text-error-700"
        aria-label="Close error message"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>
  {/if}
  
  {#if !getActiveChat()}
    <div class="flex items-center justify-center h-full text-center text-surface-500 italic">
      <p>No chat selected or found. Please select a chat from the sidebar.</p>
    </div>
  {:else}
    <div class="flex flex-col h-full">
      <!-- Chat header -->
      {#if getActiveChat()}
        {@const chat = getActiveChat()}
        <div class="p-4 border-b border-surface-300 bg-surface-100">
          <h2 class="m-0 text-xl font-semibold">{chat?.name}</h2>
          {#if chat?.company}
            <p class="mt-1 text-sm text-surface-600">{chat.company}</p>
          {/if}
        </div>
      {/if}
      
      <!-- Messages container -->
      <div class="flex-1 overflow-y-auto p-4 flex flex-col gap-4" bind:this={chatContainer}>
        {#if getMessages().length === 0}
          <div class="flex items-center justify-center h-full text-center text-surface-500 italic">
            <p>Start a conversation by sending a message.</p>
          </div>
        {:else}
          {#each getMessages() as message (message.id)}
            <div class="max-w-[80%] p-3 rounded-lg relative
                        {message.sender === 'user' ? 
                         'bg-primary-100 text-primary-900 self-end' : 
                         'bg-surface-200 text-surface-900 self-start'}">
              <p class="m-0 whitespace-pre-wrap">{message.content}</p>
              <span class="absolute bottom-1 right-2 text-xs opacity-50">
                {new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
              </span>
            </div>
          {/each}
        {/if}
      </div>
      
      <!-- Message input -->
      <div class="border-t border-surface-300 p-2 bg-surface-50">
        <form class="flex gap-2" onsubmit={(e) => {
          e.preventDefault();
          handleSendMessage();
        }}>
          <input
            type="text"
            bind:value={messageInput}
            placeholder="Type your message..."
            class="flex-1 p-2 rounded border border-surface-300 focus:outline-none focus:border-primary-400 focus:ring-2 focus:ring-primary-200"
            disabled={isLoading}
          />
          <button
            type="submit"
            class="bg-primary-500 text-white p-2 rounded disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={isLoading || !messageInput.trim()}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
            </svg>
          </button>
        </form>
      </div>
    </div>
  {/if}
</div>

<style>
  /* Any component-specific styles go here */
</style>
